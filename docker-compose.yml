services:
  eureka-server:
    build:
      context: ${HOME}/IdeaProjects/evaluation/discovery/discoveryServer
    ports:
      - "8761:8761"
    volumes:
      - maven-repo:/root/.m2/repository

  eureka-client:
    build:
      context: ${HOME}/IdeaProjects/evaluation/discovery/discoveryClient
    environment:
      EUREKA_URI: http://eureka-server:8761/eureka
      POSTGRES_HOST: ${POSTGRES_HOST}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      MONGODB_HOST: ${MONGODB_HOST}
      NEO4J_HOST: ${NEO4J_HOST}
    depends_on:
      - eureka-server
      - postgres
    deploy:
      replicas: 3
    volumes:
      - maven-repo:/root/.m2/repository

  feign-client:
    build:
      context: ${HOME}/IdeaProjects/evaluation/discovery/feign
    environment:
      EUREKA_URI: http://eureka-server:8761/eureka
    depends_on:
      - eureka-client
    ports:
      - "8079:8079"
    volumes:
      - maven-repo:/root/.m2/repository

  api-gateway:
    build:
      context: ${HOME}/IdeaProjects/evaluation/discovery/apiGateway
    environment:
      EUREKA_URI: http://eureka-server:8761/eureka
    depends_on:
      - eureka-client
    ports:
      - "8077:8077"
    volumes:
      - maven-repo:/root/.m2/repository

  postgres:
    image: postgres:15.5
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
      - ./pg_hba.conf:/etc/postgresql/pg_hba.conf

    command:
      - postgres
      - "-c"
      - "config_file=/etc/postgresql/postgresql.conf"
      - "-c"
      - "hba_file=/etc/postgresql/pg_hba.conf"

  redis:
    image: redis:7.2
    ports:
      - "6379:6379"

  mongodb:
    image: mongo:latest
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD}

  neo4j:
    image: neo4j:5.16.0-community-bullseye
    environment:
      NEO4J_AUTH: ${NEO4J_AUTH}
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j-data:/data
      - neo4j-logs:/logs
      - neo4j-import:/var/lib/neo4j/import
      - neo4j-plugins:/plugins

  zipkin:
    image: openzipkin/zipkin:3.0
    ports:
      - "9411:9411"
    volumes:
      - zipkin-data:/data

  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.96.0-arm64
    volumes:
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    ports:
      - "4317:4317" # Default OTLP gRPC receiver port
      - "4318:4318" # Default OTLP HTTP receiver port
      - "9095:9095" # Prometheus exporter port for Prometheus to scrape

  prometheus:
    image: prom/prometheus:v2.49.1
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"

  grafana:
    image: grafana/grafana:10.3.1
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GF_SECURITY_ADMIN_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana-data:/var/lib/grafana
    ports:
      - "3001:3000"

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.2
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  broker:
    image: confluentinc/cp-server:7.5.2
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9101:9101"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://broker:9092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_CONFLUENT_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:29092
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-logs:/var/lib/kafka/logs

  schema-registry:
    image: confluentinc/cp-schema-registry:7.5.2
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - broker
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: 'broker:29092'
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  control-center:
    image: confluentinc/cp-enterprise-control-center:7.5.2
    hostname: control-center
    container_name: control-center
    depends_on:
      - broker
      - schema-registry
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:29092'
      CONTROL_CENTER_CONNECT_CONNECT-DEFAULT_CLUSTER: 'connect:8083'
      CONTROL_CENTER_KSQL_KSQLDB1_URL: "http://ksqldb-server:8088"
      CONTROL_CENTER_KSQL_KSQLDB1_ADVERTISED_URL: "http://localhost:8088"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      PORT: 9021

  rest-proxy:
    image: confluentinc/cp-kafka-rest:7.5.2
    depends_on:
      - broker
      - schema-registry
    ports:
      - "8082:8082"
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:29092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.1
    volumes:
      - logstash-pipeline:/usr/share/logstash/pipeline
    environment:
      - ELASTIC_HOST=http://elasticsearch:9200
    command: >
      logstash -e '
        input {
          kafka {
            bootstrap_servers => "broker:29092"
            topics => ["eureka-server-logs", "eureka-client-logs", "feign-client-logs"]
            codec => json
          }
        }
        filter {
          if [message] =~ /^\{.*\}$/ {
            json {
              source => "message"
            }
          } else {
            mutate {
              add_field => { "parse_failure" => "true" }
            }
          }
        }
        output {
          elasticsearch {
            hosts => ["elasticsearch:9200"]
            index => "spring-boot-logs"
          }
        }
      '
    depends_on:
      - elasticsearch

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.enrollment.enabled=false
    ports:
      - "9200:9200"
    deploy:
      resources:
        limits:
          memory: 1g
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.1
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - xpack.security.enabled=false
      - xpack.security.enrollmentAPIKey.enabled=false
    ports:
      - "5601:5601"
    volumes:
      - kibana-data:/usr/share/kibana/data
    depends_on:
      - elasticsearch

volumes:
  maven-repo:
  postgres-data:
  mongodb-data:
  neo4j-data:
  neo4j-logs:
  neo4j-import:
  neo4j-plugins:
  zipkin-data:
  prometheus-data:
  grafana-data:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  kafka-logs:
  logstash:
  elasticsearch-data:
  logstash-pipeline:
  kibana-data:
